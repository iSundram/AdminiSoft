
version: '3.8'

services:
  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgres://adminisoftware:password@postgres:5432/adminisoftware_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    networks:
      - adminisoftware

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - adminisoftware

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=adminisoftware_db
      - POSTGRES_USER=adminisoftware
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - adminisoftware

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - adminisoftware

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - adminisoftware

volumes:
  postgres_data:
  redis_data:

networks:
  adminisoftware:
    driver: bridge
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: adminisoftware_db
      POSTGRES_USER: adminisoftware
      POSTGRES_PASSWORD: adminisoftware123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adminisoftware -d adminisoftware_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: adminisoftware_db
      DB_USER: adminisoftware
      DB_PASSWORD: adminisoftware123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      APP_PORT: 5000
      APP_SECRET_KEY: your_secret_key_here
      JWT_SECRET: your_jwt_secret_here
      ENVIRONMENT: production
    volumes:
      - ../logs:/var/log/adminisoftware
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped

  # Nginx (Load Balancer/Reverse Proxy)
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../frontend/dist:/var/www/html
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: adminisoftware_network
